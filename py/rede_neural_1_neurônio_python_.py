# -*- coding: utf-8 -*-
"""Rede_Neural_1_neurônio_python .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vo_RRMezpLEOmkydnz-DDP2ixYB4YRq5
"""

# Bibliotecas

# Bibliotecas manipulação dados
import numpy as np
import pandas as pd

# Bibliotecas visualização dados
import seaborn as sns
import matplotlib.pyplot as plt

# Carregue o conjunto de dados Iris
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
column_names = ["sepal_length", "sepal_width", "petal_length", "petal_width", "class"]

# Base dados
df = pd.read_csv(url, names=column_names)

# Visualizando base dados
df.head()

# Importando biblioteca
from sklearn.preprocessing import LabelEncoder

# Transforme as classes em valores numéricos (0 para Setosa e 1 para Não Setosa)
le = LabelEncoder()
df['class'] = le.fit_transform(df['class'])

# Visualizando
le

# Divida os dados em conjunto de treinamento e conjunto de teste
X = df.drop('class', axis=1).values
y = df['class'].values

# Importando biblioteca
from sklearn.model_selection import train_test_split

# Treinamento modelo
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Visualizando dados treino
X_train.shape

# Visualizando dados teste
X_test.shape

"""# **Neurônio Artificial**"""

# Importando biblioteca
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import plot_model

# Crie um modelo sequencial
model = Sequential()

# Adicione uma camada densa com um neurônio
model.add(Dense(units=1, input_dim=4, activation='sigmoid'))

# Compile o modelo
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Summario
model.summary()

# Treine o modelo e obtenha o histórico do treinamento
history = model.fit(X_train,
                    y_train,
                    epochs=100,
                    batch_size=10,
                    verbose=1)

# Plote a arquitetura do modelo em um arquivo de imagem
plot_model(model,
           to_file='Neurônio_Artificial.png',
           show_shapes=True)

# Extrair as métricas de treinamento - Loss
train_loss = history.history['loss']

# Métricas treinamento - Accuracy
train_accuracy = history.history['accuracy']

# Plotar as métricas de perda (loss) e acurácia (accuracy)
plt.figure(figsize=(12, 4))

# Plotar a métrica de perda (loss)
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'])
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')

# Plotar a métrica de acurácia (accuracy)
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'])
plt.title('Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')

plt.tight_layout()
plt.show()

# Avalie o modelo no conjunto de teste
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Acurácia do modelo no conjunto de teste: {accuracy * 100:.2f}%')

# Faça previsões no conjunto de teste
y_pred = model.predict(X_test)
y_pred_binary = [1 if y >= 0.5 else 0 for y in y_pred]

# Importando biblioteca
from sklearn.metrics import confusion_matrix, classification_report

# Calcule a matriz de confusão
cm = confusion_matrix(y_test, y_pred_binary)
print("Matriz de Confusão:")
print(cm)

# Relatório de classificação
cr = classification_report(y_test, y_pred_binary)
print("Relatório de Classificação:", cr)
print(cr)

